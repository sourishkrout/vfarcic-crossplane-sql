import "providerConfigSql.pkl"
import "providerConfigKubernetes.pkl"
import "providerConfigHelm.pkl"
import "secretSql.pkl"
import "sqlDb.pkl"
import "schema.pkl"
import "secretPull.pkl"
import "secretPush.pkl"
import "secretPullCluster.pkl"
import "daprComponents.pkl"
import "dynatrace.pkl"
import "autoReady.pkl"

class Subnet {
    hidden zoneVar: String
    hidden cidrBlockVar: String
    name = "subnet-\(zoneVar)"
    base {
        apiVersion = "ec2.aws.upbound.io/v1beta1"
        kind       = "Subnet"
        metadata { labels { zone = "us-east-1\(zoneVar)" } }
        spec { forProvider {
            region           = "us-east-1"
            availabilityZone = "us-east-1\(zoneVar)"
            cidrBlock        = cidrBlockVar
            vpcIdSelector { matchControllerRef = true }
        } }
    }
    patches {
        new {
            fromFieldPath = "metadata.annotations"
            toFieldPath   = "metadata.annotations"
        }
        new {
            fromFieldPath = "spec.id"
            toFieldPath   = "metadata.name"
            transforms { new {
                type = "string"
                string {
                    fmt = "%s-\(zoneVar)"
                    type = "Format"
                }
            } }
        }
    }
}

class RouteTableAssociation {
    hidden zoneVar: String
    name = "routeTableAssociation1\(zoneVar)"
    base {
        apiVersion = "ec2.aws.upbound.io/v1beta1"
        kind = "RouteTableAssociation"
        spec { forProvider {
            region = "us-east-1"
            routeTableIdSelector { matchControllerRef = true }
            subnetIdSelector {
                matchControllerRef = true
                matchLabels { zone = "us-east-1\(zoneVar)" }
            }
        } }
    }
    patches {
        new {
            fromFieldPath = "metadata.annotations"
            toFieldPath = "metadata.annotations"
        }
        new {
            fromFieldPath = "spec.id"
            toFieldPath = "metadata.name"
            transforms { new {
                type = "string"
                string {
                    fmt = "%s-1\(zoneVar)"
                    type = "Format"
                }
            } }
        }
    }
}

apiVersion = "apiextensions.crossplane.io/v1"
kind       = "Composition"
metadata {
    name = "aws-postgresql"
    labels {
        provider = "aws"
        db       = "postgresql"
    }
}
spec {
    compositeTypeRef {
        apiVersion = "devopstoolkitseries.com/v1alpha1"
        kind       = "SQL"
    }
    mode = "Pipeline"
    pipeline {
        new {
            functionRef { name = "crossplane-contrib-function-patch-and-transform" }
            step = "patch-and-transform"
            input {
                apiVersion = "pt.fn.crossplane.io/v1beta1"
                kind       = "Resources"
                patchSets {
                    new {
                        name = "metadata"
                        patches {
                            new {
                                fromFieldPath = "metadata.annotations"
                                toFieldPath   = "metadata.annotations"
                            }
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "metadata.name"
                            }
                        }
                    }
                }
                resources {
                    default {
                        base {
                            apiVersion = "ec2.aws.upbound.io/v1beta1"
                            spec { forProvider { region = "us-east-1" } }
                        }
                        patches { new {
                            type = "PatchSet"
                            patchSetName = "metadata"
                        } }
                    }
                    new {
                        name = "vpc"
                        base {
                            kind = "VPC"
                            spec { forProvider {
                                cidrBlock          = "11.0.0.0/16"
                                enableDnsSupport   = true
                                enableDnsHostnames = true
                            } }
                        }
                    }
                    (Subnet) {
                        zoneVar = "a"
                        cidrBlockVar = "11.0.0.0/24"
                    }
                    (Subnet) {
                        zoneVar = "b"
                        cidrBlockVar = "11.0.1.0/24"
                    }
                    (Subnet) {
                        zoneVar = "c"
                        cidrBlockVar = "11.0.2.0/24"
                    }
                    new {
                        name = "subnetgroup"
                        base {
                            apiVersion = "rds.aws.upbound.io/v1beta1"
                            kind       = "SubnetGroup"
                            spec { forProvider {
                                description = "I'm too lazy to write a good description"
                                subnetIdSelector { matchControllerRef = true }
                            } }
                        }
                    }
                    new {
                        name = "gateway"
                        base {
                            kind = "InternetGateway"
                            spec { forProvider { vpcIdSelector { matchControllerRef = true } } }
                        }
                    }
                    new {
                        name = "routeTable"
                        base {
                            kind = "RouteTable"
                            spec { forProvider { vpcIdSelector { matchControllerRef = true } } }
                        }
                    }
                    new {
                        name = "route"
                        base {
                            kind = "Route"
                            spec { forProvider {
                                routeTableIdSelector { matchControllerRef = true }
                                destinationCidrBlock = "0.0.0.0/0"
                                gatewayIdSelector { matchControllerRef = true }
                            } }
                        }
                    }
                    new {
                        name = "mainRouteTableAssociation"
                        base {
                            kind = "MainRouteTableAssociation"
                            spec { forProvider {
                                region = "us-east-1"
                                routeTableIdSelector { matchControllerRef = true }
                                vpcIdSelector { matchControllerRef = true }
                            } }
                        }
                    }
                    (RouteTableAssociation) { zoneVar = "a" }
                    (RouteTableAssociation) { zoneVar = "b" }
                    (RouteTableAssociation) { zoneVar = "c" }
                    new {
                        name = "securityGroup"
                        base {
                            kind = "SecurityGroup"
                            spec { forProvider {
                                description = "I am too lazy to write descriptions"
                                vpcIdSelector { matchControllerRef = true }
                            } }
                        }
                    }
                    new {
                        name = "securityGroupRule"
                        base {
                            kind = "SecurityGroupRule"
                            spec { forProvider {
                                description = "I am too lazy to write descriptions"
                                type = "ingress"
                                fromPort = 5432
                                toPort = 5432
                                protocol = "tcp"
                                cidrBlocks { "0.0.0.0/0" }
                                securityGroupIdSelector { matchControllerRef = true }
                            } }
                        }
                    }
                    new {
                        name = "rdsinstance"
                        base {
                            apiVersion = "rds.aws.upbound.io/v1beta2"
                            kind       = "Instance"
                            spec { forProvider {
                                dbSubnetGroupNameSelector { matchControllerRef = true }
                                vpcSecurityGroupIdSelector { matchControllerRef = true }
                                username = "masteruser"
                                engine = "postgres"
                                skipFinalSnapshot = true
                                publiclyAccessible = true
                                allocatedStorage = 200
                                passwordSecretRef { key = "password" }
                            } }
                        }
                        patches {
                            new {
                                type = "PatchSet"
                                patchSetName = "metadata"
                            }
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "spec.forProvider.identifier"
                            }
                            new {
                                fromFieldPath = "spec.parameters.size"
                                toFieldPath   = "spec.forProvider.instanceClass"
                                transforms { new {
                                    type = "map"
                                    map {
                                        small  = "db.m5.large"
                                        medium = "db.m5.2xlarge"
                                        large  = "db.m5.8xlarge"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.parameters.version"
                                toFieldPath   = "spec.forProvider.engineVersion"
                            }
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "spec.forProvider.passwordSecretRef.name"
                                transforms { new {
                                    type = "string"
                                    string {
                                        fmt = "%s-password"
                                        type = "Format"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.claimRef.namespace"
                                toFieldPath   = "spec.forProvider.passwordSecretRef.namespace"
                            }
                            new {
                                type          = "ToCompositeFieldPath"
                                fromFieldPath = "status.atProvider.address"
                                toFieldPath   = "status.address"
                            }
                        }
                    }
                    (providerConfigSql)
                    (providerConfigKubernetes)
                    (providerConfigHelm)
                    (secretSql) {
                        userFromApi     = "rds.aws.upbound.io/v1beta1"
                        userFromKind    = "Instance"
                        userFromPath    = "spec.forProvider.username"
                        addressFromApi  = "rds.aws.upbound.io/v1beta1"
                        addressFromKind = "Instance"
                        addressFromPath = "status.atProvider.address"
                    }
                }
            }
        }
        (sqlDb)
        (schema)
        (secretPull)
        (secretPush)
        (secretPullCluster)
        (daprComponents)
        (dynatrace)
        (autoReady)
    }
}